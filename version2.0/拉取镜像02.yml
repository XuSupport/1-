app:
  description: 拉取镜像
  icon: 🤖
  icon_background: '#FFEAD5'
  mode: workflow
  name: 拉取镜像02
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/deepseek:0.0.6@dd589dc093c8084925858034ab5ec1fdf0d33819f43226c2f8c4a749a9acbbb2
kind: app
version: 0.3.0
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: 29b96ca8-f2c5-4202-a88f-65fb8c9b708a
    name: API_KEY
    selector:
    - env
    - API_KEY
    value: e62a9b0d239d3f6fe2f203c5bede453c
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: start
        targetType: llm
      id: 1751958143587-source-1751958163793-target
      source: '1751958143587'
      sourceHandle: source
      target: '1751958163793'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: llm
      id: 1751958163793-source-1751958199932-target
      source: '1751958163793'
      sourceHandle: source
      target: '1751958199932'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1751958199932-source-1751958245074-target
      source: '1751958199932'
      sourceHandle: source
      target: '1751958245074'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: code
      id: 1751958245074-source-1751958272179-target
      source: '1751958245074'
      sourceHandle: source
      target: '1751958272179'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: end
      id: 1751958272179-source-1751958296012-target
      source: '1751958272179'
      sourceHandle: source
      target: '1751958296012'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 开始
        type: start
        variables:
        - label: input
          max_length: 256
          options: []
          required: true
          type: text-input
          variable: input
      height: 90
      id: '1751958143587'
      position:
        x: 78.85943760749768
        y: 282
      positionAbsolute:
        x: 78.85943760749768
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1751958143587'
          - input
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: 0b36e3d9-5dff-4fca-9359-f462778f8bce
          role: system
          text: "你是一个专业的漏洞靶场部署助手，通过API接口自动化搭建安全研究环境。当用户请求部署特定漏洞靶场时{{#1751958143587.input#}}，你需要生成完整的API调用执行计划。\n\
            \n## 你的主要职责：\n1. 理解用户想要部署的漏洞靶场类型\n2. 生成完整的API调用序列，包括拉取镜像和启动容器\n3. 提供相应的靶场访问信息和使用指南\n\
            \n## 输出格式：\n你必须始终输出一个格式如下的JSON对象：\n```json\n{\n  \"plan\": \"部署漏洞靶场的执行计划简述\"\
            ,\n  \"target_name\": \"靶场名称\",\n  \"target_type\": \"漏洞类型，如SQL注入、XSS、RCE等\"\
            ,\n  \"steps\": [\n    {\n      \"description\": \"拉取靶场镜像\",\n      \"\
            api_endpoint\": \"/docker/pull\",\n      \"method\": \"POST\",\n     \
            \ \"payload\": {\n        \"image\": \"靶场镜像名:标签\"\n      }\n    },\n \
            \   {\n      \"description\": \"启动靶场容器\",\n      \"api_endpoint\": \"\
            /docker/run\",\n      \"method\": \"POST\",\n      \"payload\": {\n  \
            \      \"image\": \"靶场镜像名:标签\",\n        \"name\": \"靶场容器名\",\n      \
            \  \"ports\": [\"宿主端口:容器端口\"]\n      }\n    }\n  ],\n  \"access_info\"\
            : {\n    \"url\": \"访问靶场的URL\",\n    \"default_credentials\": {\n    \
            \  \"username\": \"默认用户名(如果有)\",\n      \"password\": \"默认密码(如果有)\"\n\
            \    }\n  },\n  \"target_description\": \"靶场环境简要描述及包含的漏洞说明\"\n}\n```\n\
            \n## 常见漏洞靶场类型：\n\n1. SQL注入靶场：\n   - DVWA (Damn Vulnerable Web App)\n \
            \  - WebGoat\n   - SQLi-labs\n   - SQLI靶场\n\n2. XSS靶场：\n   - XSSLabs\n\
            \   - DVWA (包含XSS模块)\n   - XVWA\n\n3. 文件上传漏洞：\n   - upload-labs\n   -\
            \ DVWA (包含上传模块)\n\n4. RCE(远程代码执行)靶场：\n   - vulhub系列\n   - DVWA (命令注入模块)\n\
            \n5. 综合靶场：\n   - DVWA\n   - WebGoat\n   - OWASP Juice Shop\n   - bWAPP\n\
            \   - Vulhub\n\n## 重要提示：\n- ports 字段中应根据以下两点确定端口映射：\n用户是否指定端口：若指定，按用户要求开放；\n\
            镜像默认端口：若用户未指定，则优先选用镜像的标准默认端口，如：\nMySQL → 3306\nDVWA → 80 或 8080\nRedis\
            \ → 6379\nWebGoat → 8080\nJuice Shop → 3000\n如果靶场运行多个服务组件，需为每个服务分别定义端口映射项（如多个\
            \ \"宿主端口:容器端口\" 映射）。\n- 对于需要环境变量的靶场，确保在payload中设置正确的环境变量\n- 提供靶场的默认访问凭据(如果有)\n\
            - 简要描述靶场中包含的漏洞类型和难度级别\n- 对于可能需要持久化数据的靶场，考虑添加卷挂载配置\n\n对于用户的每个请求，你应该详细分析需求，并生成适合该特定靶场的完整部署计划。你的回答应该只包含一个格式正确的JSON对象，不要添加任何额外的解释或说明。\n\
            ```\n"
        selected: false
        title: 镜像选择
        type: llm
        variables: []
        vision:
          enabled: false
      height: 90
      id: '1751958163793'
      position:
        x: 384
        y: 282
      positionAbsolute:
        x: 384
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1751958163793'
          - text
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: 195b3768-84dd-4ebc-8d13-3db1a186bd8f
          role: system
          text: "你是一个漏洞靶场快速部署助手。我会提供一个包含靶场信息的JSON对象{{#1751958163793.text#}}，你需要将其转换为简洁的执行命令。请只生成针对Docker镜像拉取和容器启动的命令，使用以下格式：\n\
            拉取靶场镜像：\nBash\ncurl -X POST \"http://172.17.0.1:8005/docker/pull\" -H\
            \ \"Content-Type: application/json\" -d '{\"image\":\"靶场镜像名:标签\"}'\n\n\
            启动靶场容器：\nBash\ncurl -X POST \"http://172.17.0.1:8005/docker/run\" -H \"\
            Content-Type: application/json\" -d '{\"image\":\"靶场镜像名:标签\",\"name\"\
            :\"容器名\",\"ports\":[\"宿主机端口:容器端口\"] **,\"env_vars\":[\"环境变量名1=环境变量值1\"\
            , \"环境变量名2=环境变量值2\"]**}'\n\n输入JSON示例:\nJSON\n{\n  \"image\": \"漏洞靶场镜像\"\
            ,\n  \"container_name\": \"容器名称\",\n  \"port_mapping\": \"8080:80\",\n\
            \  \"access_url\": \"访问URL\",\n  \"username\": \"默认用户名\",\n  \"password\"\
            : \"默认密码\",\n  **\"env_vars\": [\"MYSQL_ROOT_PASSWORD=vulnlab\", \"ANOTHER_ENV=value\"\
            ]** // 强调 env_vars 是字符串列表\n}\n\n重要提示：\n\"ports\" 字段只允许包含一个端口映射字符串。你需要根据提供的\
            \ image (靶场镜像) 的常见服务类型和其默认端口，智能地推荐并选择一个最常用的宿主机端口进行映射。\n对于需要设置环境变量的镜像（例如\
            \ MySQL 需要 MYSQL_ROOT_PASSWORD），请确保在 payload 中包含 env_vars 字段。\n特别强调：env_vars\
            \ 字段的值必须是一个字符串列表（JSON 数组），且列表中的每个元素都必须是一个形如 \"KEY=VALUE\" 的完整字符串。\n例如：\n\
            对于 Web 类靶场（如 DVWA, Juice Shop, Mutillidae 等），容器内部通常是 80 端口，请推荐映射到宿主机的\
            \ 8080 或 80 端口。\n对于 数据库类靶场（如 MySQL, PostgreSQL），容器内部通常是 3306 或 5432 端口，请推荐映射到宿主机对应的\
            \ 3306 或 5432 端口，并包含必要的 env_vars (例如：\"env_vars\": [\"MYSQL_ROOT_PASSWORD=密码\"\
            ])。\n对于 SSH 服务（如 Metasploitable），容器内部通常是 22 端口，请推荐映射到宿主机的 2222 端口。\n请只输出可执行的命令内容，不需要任何额外解释。"
        selected: false
        title: CURL深化
        type: llm
        variables: []
        vision:
          enabled: false
      height: 90
      id: '1751958199932'
      position:
        x: 688
        y: 282
      positionAbsolute:
        x: 688
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import re\n\ndef main(input_str: str ) -> dict:\n    \"\"\"\n    解析输入中的\
          \ curl 命令，只提取拉取镜像 (pull) 的命令。\n\n    参数:\n      input_str: 包含 curl 命令的字符串，预期其中包含一个拉取镜像的命令。\n\
          \n    返回:\n      dict: 包含 'result' 字段的字典，值为提取到的拉取命令字符串或错误/提示信息。\n    \"\"\
          \"\n    # 提取 curl 命令的通用模式\n    curl_pattern = r'curl\\s+-X\\s+POST\\s+\"\
          ([^\"]+)\"\\s+-H\\s+\"[^\"]+\"\\s+-d\\s+\\'([^\\']+)\\''\n    \n    # 在输入字符串中查找所有匹配的\
          \ curl 命令\n    curl_commands = re.findall(curl_pattern, input_str)\n   \
          \ \n    # 初始化拉取命令\n    pull_command = \"\"\n    \n    # 遍历找到的 curl 命令\n\
          \    for url, data in curl_commands:\n        # 替换主机地址为 Docker 主机（如果需要，根据实际情况调整）\n\
          \        # 这里假设目标主机是 172.17.0.1，如果你的服务在 127.0.0.1，则无需替换\n        # url =\
          \ url.replace(\"127.0.0.1\", \"172.17.0.1\") # 根据你的实际部署情况决定是否需要这行\n\n  \
          \      # 构造规范化的命令字符串\n        formatted_command = f\"curl -X POST \\\"{url}\\\
          \" -H \\\"Content-Type: application/json\\\" -d '{data}'\"\n        \n \
          \       # 根据 URL 路径分类，只关注 /docker/pull\n        if \"/docker/pull\" in url:\n\
          \            pull_command = formatted_command\n            break # 找到拉取命令后即可停止，因为我们只需要一个\n\
          \n    # --- 关键修改部分：确保返回的字典包含 \"result\" 键 ---\n    if pull_command:\n  \
          \      # 如果找到了拉取命令，返回成功信息和命令\n        return {\n            \"result\":\
          \ f\"```{pull_command}\\n```\"\n        }\n    else:\n        # 如果没有找到拉取命令，返回提示信息\n\
          \        return {\n            \"result\": \"ℹ️ 未在输入中找到有效的 Docker 镜像拉取命令。\"\
          \n        }\n\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: CURL拆分
        type: code
        variables:
        - value_selector:
          - '1751958199932'
          - text
          variable: input_str
      height: 54
      id: '1751958245074'
      position:
        x: 989.4859284588479
        y: 282
      positionAbsolute:
        x: 989.4859284588479
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "def main(input: str, API_KEY: str) -> dict:\n    \"\"\"\n    使用Python\
          \ requests库直接发送Docker镜像拉取请求\n    \n    参数:\n      input: 包含curl命令的字符串\n\
          \      API_KEY: API密钥，用于认证API请求\n    \n    返回:\n      包含执行结果的字典\n    \"\"\
          \"\n    import requests\n    import json\n    import re\n    \n    result_lines\
          \ = []\n    \n    try:\n        # 提取Docker API主机地址\n        url_match =\
          \ re.search(r'http[^\"]+/docker/pull', input)\n        if url_match:\n \
          \           url = url_match.group(0)\n        else:\n            url = \"\
          http://172.17.0.1:8005/docker/pull\"\n            \n        result_lines.append(f\"\
          Docker API地址: {url}\")\n        \n        # 提取JSON数据部分\n        data_match\
          \ = re.search(r'-d\\s+\\'({[^\\']+})\\'', input)\n        if not data_match:\n\
          \            data_match = re.search(r'-d\\s+\\\"({[^\\\"]+})\\\"', input)\n\
          \            if not data_match:\n                return {\"result\": \"\
          错误: 无法从输入中提取JSON数据\"}\n            \n        data_str = data_match.group(1)\n\
          \        \n        # 解析JSON数据，处理转义字符\n        try:\n            # 将JSON字符串中的转义字符处理掉\n\
          \            data_str = data_str.replace('\\\\\\\"', '\"').replace('\\\\\
          \"', '\"')\n            data_json = json.loads(data_str)\n        except\
          \ json.JSONDecodeError:\n            return {\"result\": f\"错误: JSON解析失败\
          \ - {data_str}\"}\n        \n        # 提取镜像名称\n        image_name = data_json.get(\"\
          image\", \"未指定镜像\")\n        \n        result_lines.append(f\"准备拉取Docker镜像:\
          \ {image_name}\")\n        \n        # 使用requests库直接发送请求，添加API密钥认证\n   \
          \     headers = {\n            \"Content-Type\": \"application/json\",\n\
          \            \"X-API-Key\": API_KEY\n        }\n        \n        result_lines.append(\"\
          \\n发送拉取请求中...\")\n        result_lines.append(\"(大型镜像可能需要较长时间，请耐心等待)\")\n\
          \        \n        # 拉取镜像需要较长时间，设置更长的超时\n        response = requests.post(url,\
          \ headers=headers, json=data_json, timeout=120)\n        \n        # 处理响应\n\
          \        if response.status_code >= 200 and response.status_code < 300:\n\
          \            try:\n                response_data = response.json()\n   \
          \             result_lines.append(f\"✅ 镜像拉取请求成功!\")\n                \n\
          \                # 检查详细信息中是否包含成功消息\n                message = response_data.get(\"\
          message\", \"\")\n                if message:\n                    result_lines.append(f\"\
          服务器响应: {message}\")\n                \n                result_lines.append(f\"\
          \\n镜像 {image_name} 拉取已开始\")\n                result_lines.append(\"Docker拉取过程将在后台继续，即使API请求已完成\"\
          )\n                result_lines.append(\"大型镜像可能需要几分钟时间下载\")\n          \
          \      \n            except json.JSONDecodeError:\n                result_lines.append(f\"\
          请求已接受，但无法解析响应: {response.text}\")\n        else:\n            result_lines.append(f\"\
          ❌ 拉取请求失败 (状态码: {response.status_code})\")\n            result_lines.append(f\"\
          错误信息: {response.text}\")\n    \n    except requests.exceptions.Timeout:\n\
          \        result_lines.append(\"⚠️ 请求超时，但镜像拉取可能仍在后台进行中\")\n        result_lines.append(\"\
          Docker拉取大型镜像通常需要较长时间\")\n        result_lines.append(\"即使API请求超时，Docker守护进程仍会继续下载\"\
          )\n        result_lines.append(\"\\n可以使用以下命令检查拉取状态:\")\n        result_lines.append(f\"\
          docker image ls | grep {image_name if 'image_name' in locals() else ''}\"\
          )\n    except requests.exceptions.ConnectionError:\n        result_lines.append(\"\
          ❌ 无法连接到Docker API服务\")\n        result_lines.append(\"请确保Docker API服务正在运行，且API服务地址可访问\"\
          )\n    except Exception as e:\n        result_lines.append(f\"❌ 执行错误: {str(e)}\"\
          )\n    \n    # 返回执行结果和后续步骤提示\n    result_lines.append(\"\\n拉取完成后，请使用容器运行工具启动容器\"\
          )\n    \n    return {\n        \"result\": \"\\n\".join(result_lines)\n\
          \    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: true
        title: 拉取镜像
        type: code
        variables:
        - value_selector:
          - '1751958245074'
          - result
          variable: input
        - value_selector:
          - env
          - API_KEY
          variable: API_KEY
      height: 54
      id: '1751958272179'
      position:
        x: 1295.9999999999998
        y: 282
      positionAbsolute:
        x: 1295.9999999999998
        y: 282
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1751958272179'
          - result
          variable: result
        selected: false
        title: 结束
        type: end
      height: 90
      id: '1751958296012'
      position:
        x: 1600
        y: 282
      positionAbsolute:
        x: 1600
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: -204.33631129272317
      y: 244.12738230682186
      zoom: 0.7280621326643683
