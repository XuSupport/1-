app:
  description: 查看当前容器状态
  icon: 🤖
  icon_background: '#FFEAD5'
  mode: workflow
  name: 查看当前容器状态05
  use_icon_as_answer_icon: false
dependencies: []
kind: app
version: 0.3.0
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: e8e5cb41-3be0-487b-b1fb-2c3f1c9318ab
    name: API_KEY
    selector:
    - env
    - API_KEY
    value: e62a9b0d239d3f6fe2f203c5bede453c
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: start
        targetType: code
      id: 1751957697438-source-1751957715537-target
      source: '1751957697438'
      sourceHandle: source
      target: '1751957715537'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: end
      id: 1751957715537-source-1751957734842-target
      source: '1751957715537'
      sourceHandle: source
      target: '1751957734842'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 开始
        type: start
        variables:
        - label: input
          max_length: 256
          options: []
          required: true
          type: text-input
          variable: input
      height: 90
      id: '1751957697438'
      position:
        x: 79
        y: 282
      positionAbsolute:
        x: 79
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport requests\n\
          import json\nimport argparse\n\ndef main(input:str, API_KEY:str) -> dict:\n\
          \    \"\"\"\n    获取所有Docker容器信息（包括未运行的）并返回，让后端大模型进行比对\n    \n    参数:\n \
          \       input: 用户输入的查询文本，包含对靶场环境的需求描述\n        \n    返回:\n        dict:\
          \ 包含所有容器信息和用户输入的格式化文本\n    \"\"\"\n    # API服务的URL\n    API_BASE_URL = \"\
          http://172.17.0.1:8005\"\n    \n    # 添加API密钥到请求头\n    headers = {\n   \
          \     \"X-API-Key\": API_KEY\n    }\n    \n    try:\n        # 获取所有Docker容器（包括未运行的）\n\
          \        try:\n            # 使用 docker ps -a 对应的API\n            containers_response\
          \ = requests.get(f\"{API_BASE_URL}/docker/ps?all=true\", headers=headers,\
          \ timeout=10)\n            containers_response.raise_for_status()\n    \
          \        containers_data = containers_response.json()\n        except Exception\
          \ as e:\n            return {\n                \"result\": f\"### ⚠️ 获取Docker容器列表失败\\\
          n\\n无法获取当前的Docker容器列表。\\n错误信息: {str(e)}\\n\\n请确认Docker服务正常运行。\\n\\n**用户查询**:\
          \ {input}\"\n            }\n        \n        if containers_data.get(\"\
          status\") != \"success\":\n            return {\n                \"result\"\
          : f\"### ⚠️ 获取Docker容器列表失败\\n\\n无法获取当前的Docker容器列表。\\n错误信息: {containers_data.get('message',\
          \ '未知错误')}\\n\\n请确认Docker服务正常运行。\\n\\n**用户查询**: {input}\"\n            }\n\
          \        \n        # 获取所有容器\n        containers = containers_data.get(\"\
          containers\", [])\n        \n        # 如果没有容器\n        if not containers:\n\
          \            return {\n                \"result\": f\"### ℹ️ 当前环境中没有Docker容器\\\
          n\\n未检测到任何Docker容器（包括停止状态）。\\n\\n**用户查询**: {input}\"\n            }\n  \
          \      \n        # 返回所有容器信息\n        result = f\"### \U0001F4CB 当前所有Docker容器\\\
          n\\n\"\n        \n        # 表格标题\n        result += \"| 容器ID | 容器名称 | 镜像\
          \ | 状态 | 端口 | 创建时间 |\\n\"\n        result += \"|--------|---------|------|------|------|--------|\\\
          n\"\n        \n        # 表格内容\n        for container in containers:\n  \
          \          container_id = container.get(\"ID\", \"\")[:12]  # 截取ID前12位以便显示\n\
          \            names = container.get(\"Names\", \"\")\n            image =\
          \ container.get(\"Image\", \"\")\n            status = container.get(\"\
          Status\", \"\")\n            ports = container.get(\"Ports\", \"\")\n  \
          \          created = container.get(\"CreatedAt\", \"\")\n            \n\
          \            # 根据状态添加状态图标\n            if \"Up\" in status:\n          \
          \      status = \"\U0001F7E2 \" + status  # 运行中\n            elif \"Exited\"\
          \ in status:\n                status = \"\U0001F534 \" + status  # 已停止\n\
          \            else:\n                status = \"⚪ \" + status  # 其他状态\n \
          \               \n            result += f\"| {container_id} | {names} |\
          \ {image} | {status} | {ports} | {created} |\\n\"\n        \n        # 添加简单的状态统计\n\
          \        running = sum(1 for c in containers if \"Up\" in c.get(\"Status\"\
          , \"\"))\n        stopped = sum(1 for c in containers if \"Exited\" in c.get(\"\
          Status\", \"\"))\n        result += f\"\\n**统计信息**: 共{len(containers)}个容器，{running}个运行中，{stopped}个已停止\\\
          n\\n\"\n        \n        result += f\"**用户查询**: {input}\"\n        \n \
          \       return {\"result\": result}\n        \n    except requests.exceptions.ConnectionError:\n\
          \        return {\n            \"result\": f\"### ❌ 连接错误\\n\\n无法连接到Docker\
          \ API服务。请确保服务正在运行。\\n\\n**用户查询**: {input}\"\n        }\n    except requests.exceptions.Timeout:\n\
          \        return {\n            \"result\": f\"### ⏱️ 请求超时\\n\\n连接Docker\
          \ API服务超时。请检查服务状态后重试。\\n\\n**用户查询**: {input}\"\n        }\n    except Exception\
          \ as e:\n        return {\n            \"result\": f\"### \U0001F525 未知错误\\\
          n\\n处理Docker容器查询时发生错误: {str(e)}\\n\\n**用户查询**: {input}\"\n        }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 查看当前容器状态
        type: code
        variables:
        - value_selector:
          - '1751957697438'
          - input
          variable: input
        - value_selector:
          - env
          - API_KEY
          variable: API_KEY
      height: 54
      id: '1751957715537'
      position:
        x: 383
        y: 282
      positionAbsolute:
        x: 383
        y: 282
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1751957715537'
          - result
          variable: result
        selected: false
        title: 结束
        type: end
      height: 90
      id: '1751957734842'
      position:
        x: 687
        y: 282
      positionAbsolute:
        x: 687
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: -52.293591645977585
      y: 134.78985850650844
      zoom: 0.8507955397354482
