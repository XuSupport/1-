app:
  description: 开启容器镜像
  icon: 🤖
  icon_background: '#FFEAD5'
  mode: workflow
  name: 开启容器镜像02
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/deepseek:0.0.6@dd589dc093c8084925858034ab5ec1fdf0d33819f43226c2f8c4a749a9acbbb2
kind: app
version: 0.3.0
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: b5153b35-027a-402a-9cc1-f7a026361e2c
    name: API_KEY
    selector:
    - env
    - API_KEY
    value: e62a9b0d239d3f6fe2f203c5bede453c
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: start
        targetType: code
      id: 1751957830216-source-1751957837716-target
      source: '1751957830216'
      sourceHandle: source
      target: '1751957837716'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: llm
      id: 1751957837716-source-1751957987156-target
      source: '1751957837716'
      sourceHandle: source
      target: '1751957987156'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1751957987156-source-1751958044942-target
      source: '1751957987156'
      sourceHandle: source
      target: '1751958044942'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: end
      id: 1751958044942-source-1751958079209-target
      source: '1751958044942'
      sourceHandle: source
      target: '1751958079209'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 开始
        type: start
        variables:
        - label: input
          max_length: 256
          options: []
          required: true
          type: text-input
          variable: input
      height: 90
      id: '1751957830216'
      position:
        x: 80
        y: 282
      positionAbsolute:
        x: 80
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport requests\n\
          import json\nimport argparse\n\ndef main(input:str, API_KEY:str) -> dict:\n\
          \    \"\"\"\n    获取所有Docker容器信息（包括未运行的）并返回，让后端大模型进行比对\n    \n    参数:\n \
          \       input: 用户输入的查询文本，包含对靶场环境的需求描述\n        \n    返回:\n        dict:\
          \ 包含所有容器信息和用户输入的格式化文本\n    \"\"\"\n    # API服务的URL\n    API_BASE_URL = \"\
          http://172.17.0.1:8005\"\n    \n    # 添加API密钥到请求头\n    headers = {\n   \
          \     \"X-API-Key\": API_KEY\n    }\n    \n    try:\n        # 获取所有Docker容器（包括未运行的）\n\
          \        try:\n            # 使用 docker ps -a 对应的API\n            containers_response\
          \ = requests.get(f\"{API_BASE_URL}/docker/ps?all=true\", headers=headers,\
          \ timeout=10)\n            containers_response.raise_for_status()\n    \
          \        containers_data = containers_response.json()\n        except Exception\
          \ as e:\n            return {\n                \"result\": f\"### ⚠️ 获取Docker容器列表失败\\\
          n\\n无法获取当前的Docker容器列表。\\n错误信息: {str(e)}\\n\\n请确认Docker服务正常运行。\\n\\n**用户查询**:\
          \ {input}\"\n            }\n        \n        if containers_data.get(\"\
          status\") != \"success\":\n            return {\n                \"result\"\
          : f\"### ⚠️ 获取Docker容器列表失败\\n\\n无法获取当前的Docker容器列表。\\n错误信息: {containers_data.get('message',\
          \ '未知错误')}\\n\\n请确认Docker服务正常运行。\\n\\n**用户查询**: {input}\"\n            }\n\
          \        \n        # 获取所有容器\n        containers = containers_data.get(\"\
          containers\", [])\n        \n        # 如果没有容器\n        if not containers:\n\
          \            return {\n                \"result\": f\"### ℹ️ 当前环境中没有Docker容器\\\
          n\\n未检测到任何Docker容器（包括停止状态）。\\n\\n**用户查询**: {input}\"\n            }\n  \
          \      \n        # 返回所有容器信息\n        result = f\"### \U0001F4CB 当前所有Docker容器\\\
          n\\n\"\n        \n        # 表格标题\n        result += \"| 容器ID | 容器名称 | 镜像\
          \ | 状态 | 端口 | 创建时间 |\\n\"\n        result += \"|--------|---------|------|------|------|--------|\\\
          n\"\n        \n        # 表格内容\n        for container in containers:\n  \
          \          container_id = container.get(\"ID\", \"\")[:12]  # 截取ID前12位以便显示\n\
          \            names = container.get(\"Names\", \"\")\n            image =\
          \ container.get(\"Image\", \"\")\n            status = container.get(\"\
          Status\", \"\")\n            ports = container.get(\"Ports\", \"\")\n  \
          \          created = container.get(\"CreatedAt\", \"\")\n            \n\
          \            # 根据状态添加状态图标\n            if \"Up\" in status:\n          \
          \      status = \"\U0001F7E2 \" + status  # 运行中\n            elif \"Exited\"\
          \ in status:\n                status = \"\U0001F534 \" + status  # 已停止\n\
          \            else:\n                status = \"⚪ \" + status  # 其他状态\n \
          \               \n            result += f\"| {container_id} | {names} |\
          \ {image} | {status} | {ports} | {created} |\\n\"\n        \n        # 添加简单的状态统计\n\
          \        running = sum(1 for c in containers if \"Up\" in c.get(\"Status\"\
          , \"\"))\n        stopped = sum(1 for c in containers if \"Exited\" in c.get(\"\
          Status\", \"\"))\n        result += f\"\\n**统计信息**: 共{len(containers)}个容器，{running}个运行中，{stopped}个已停止\\\
          n\\n\"\n        \n        result += f\"**用户查询**: {input}\"\n        \n \
          \       return {\"result\": result}\n        \n    except requests.exceptions.ConnectionError:\n\
          \        return {\n            \"result\": f\"### ❌ 连接错误\\n\\n无法连接到Docker\
          \ API服务。请确保服务正在运行。\\n\\n**用户查询**: {input}\"\n        }\n    except requests.exceptions.Timeout:\n\
          \        return {\n            \"result\": f\"### ⏱️ 请求超时\\n\\n连接Docker\
          \ API服务超时。请检查服务状态后重试。\\n\\n**用户查询**: {input}\"\n        }\n    except Exception\
          \ as e:\n        return {\n            \"result\": f\"### \U0001F525 未知错误\\\
          n\\n处理Docker容器查询时发生错误: {str(e)}\\n\\n**用户查询**: {input}\"\n        }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 查看当前所有容器的状态
        type: code
        variables:
        - value_selector:
          - '1751957830216'
          - input
          variable: input
        - value_selector:
          - env
          - API_KEY
          variable: API_KEY
      height: 54
      id: '1751957837716'
      position:
        x: 383
        y: 282
      positionAbsolute:
        x: 383
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1751957837716'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: e1ce2efa-cc67-48ab-b7e3-44bd7a748ca9
          role: system
          text: "# 靶场快速部署命令生成器\n\n你是一个漏洞靶场快速部署助手。你将收到一个包含Docker容器列表和用户查询的输入{{#context#}}，需要判断用户需要启动什么靶场，并生成相应的curl命令。\n\
            \n## 输入格式解析\n\n输入将包含:\n1. Docker容器列表（表格形式，包含容器ID、容器名称、镜像、状态、端口等信息）\n2.\
            \ 用户查询（一般是请求启动某类型靶场的文本）\n\n## 匹配规则\n\n1. 从用户查询中识别靶场类型:\n   - DVWA类型: dvwa、damn、vulnerable\n\
            \   - SQL注入类型: sqli、sql注入、sql-injection\n   - XSS类型: xss、cross-site\n\
            \   - 文件上传类型: upload、fileupload\n   - 综合靶场: pikachu、vulhub、webgoat\n\n\
            2. 在容器列表中查找匹配项:\n   - 容器名称或其镜像名称中包含相关关键词\n   - 优先考虑状态为\"已停止\"(\U0001F534\
            )的相关容器\n\n## 严格输出格式\n\n如果找到匹配的已停止容器，**只输出**以下命令（不要有任何解释或额外文本）:\n\n```\n\
            curl -X POST \"http://172.17.0.1:8005/docker/start\" -H \"Content-Type:\
            \ application/json\" -d '{\"container_id\":\"容器ID或容器名称\"}'\n```\n\n如果找不到匹配的已停止容器，但有匹配的镜像关键词，**只输出**以下命令:\n\
            \n```\ncurl -X POST \"http://172.17.0.1:8005/docker/run\" -H \"Content-Type:\
            \ application/json\" -d '{\"image\":\"镜像名:标签\",\"name\":\"靶场类型-target\"\
            ,\"ports\":[\"8080:80\"]}'\n```\n\n对于不同类型的靶场，调整端口映射:\n- 普通Web靶场: `\"ports\"\
            :[\"8080:80\"]`\n- 包含数据库的靶场: `\"ports\":[\"8080:80\",\"3306:3306\"]`\n\
            \n如果没有找到匹配的容器或镜像，**只输出**以下命令:\n\n```\ncurl -X POST \"http://172.17.0.1:8005/docker/pull\"\
            \ -H \"Content-Type: application/json\" -d '{\"image\":\"推荐的靶场镜像:latest\"\
            }'\n```\n\n推荐的默认镜像:\n- DVWA类型: vulnerables/web-dvwa:latest\n- SQL注入类型:\
            \ acgpiano/sqli-labs:latest\n- XSS类型: ismisepaul/securityshepherd:latest\n\
            - 文件上传类型: vulhub/upload-labs:latest\n\n## 重要提示\n\n1. 严格遵守输出格式，仅输出curl命令，不要有任何解释或额外文本\n\
            2. 不要在命令中使用单引号内的单引号，确保JSON格式正确\n3. 优先使用已停止的容器并启动它，而不是创建新容器\n4. 如果没有已停止的相关容器，再考虑使用镜像创建新容器\n\
            5. 只有当没有相关容器和镜像时，才输出拉取命令"
        selected: false
        title: curl生成
        type: llm
        variables: []
        vision:
          enabled: false
      height: 90
      id: '1751957987156'
      position:
        x: 687
        y: 282
      positionAbsolute:
        x: 687
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport requests\n\
          import json\nimport re\n\ndef main(input:str, API_KEY:str) -> dict:\n  \
          \  \"\"\"\n    启动已停止的Docker容器，适用于Dify平台\n    \n    参数:\n        input: 用户输入，可以是以下格式：\n\
          \               1. 容器ID或名称的纯文本 (例如: \"dvwa-target\")\n               2.\
          \ JSON字符串，例如: {\"container_id\": \"dvwa-target\"}\n               3. curl命令格式的文本\n\
          \        \n    返回:\n        dict: 包含操作结果的格式化文本\n    \"\"\"\n    # API服务的URL\
          \ - 修改为localhost而不是host.docker.internal\n    API_BASE_URL = \"http://172.17.0.1:8005\"\
          \n    \n    # 添加API密钥到请求头\n    headers = {\n        \"X-API-Key\": API_KEY\n\
          \    }\n    \n    try:\n        # 提取容器ID或名称\n        container_id = input.strip()\n\
          \        \n        # 处理curl命令格式\n        if \"curl\" in container_id and\
          \ \"docker/start\" in container_id:\n            match = re.search(r'\"\
          container_id\"\\s*:\\s*\"([^\"]+)\"', container_id)\n            if match:\n\
          \                container_id = match.group(1)\n        # 处理JSON格式\n   \
          \     elif container_id.startswith('{') and container_id.endswith('}'):\n\
          \            try:\n                data = json.loads(container_id)\n   \
          \             if \"container_id\" in data:\n                    container_id\
          \ = data[\"container_id\"]\n            except:\n                pass\n\
          \        \n        # 确保容器ID不为空且有效\n        if not container_id or len(container_id.strip())\
          \ == 0 or container_id.startswith('curl'):\n            return {\n     \
          \           \"result\": \"### ❌ 错误\\n\\n无法识别容器ID。请提供有效的容器ID或名称。\"\n    \
          \        }\n        \n        print(f\"准备启动容器: {container_id}\")\n     \
          \   \n        try:\n            # 调用Docker API启动容器\n            response\
          \ = requests.post(\n                f\"{API_BASE_URL}/docker/start\",\n\
          \                headers={\"Content-Type\": \"application/json\", \"X-API-Key\"\
          : API_KEY},\n                json={\"container_id\": container_id},\n  \
          \              timeout=30\n            )\n            \n            # 检查API响应\n\
          \            if response.status_code == 200:\n                response_data\
          \ = response.json()\n                if response_data.get(\"status\") ==\
          \ \"success\":\n                    # 获取容器信息\n                    try:\n\
          \                        containers_response = requests.get(f\"{API_BASE_URL}/docker/ps\"\
          , headers=headers, timeout=10)\n                        port_info = \"未知\"\
          \n                        \n                        if containers_response.status_code\
          \ == 200:\n                            containers_data = containers_response.json()\n\
          \                            if containers_data.get(\"status\") == \"success\"\
          :\n                                for container in containers_data.get(\"\
          containers\", []):\n                                    if container_id\
          \ in container.get(\"ID\", \"\") or container_id == container.get(\"Names\"\
          , \"\"):\n                                        port_info = container.get(\"\
          Ports\", \"未暴露端口\")\n                                        break\n   \
          \                 except:\n                        port_info = \"获取端口信息失败\"\
          \n                    \n                    # 格式化成功消息\n                \
          \    result = f\"### ✅ 容器启动成功\\n\\n\"\n                    result += f\"\
          已成功启动容器: **{container_id}**\\n\\n\"\n                    result += f\"**端口映射**:\
          \ {port_info}\\n\\n\"\n                    \n                    # 尝试提取Web访问链接\n\
          \                    if isinstance(port_info, str) and (\"80/tcp\" in port_info\
          \ or \"8080\" in port_info):\n                        port_match = re.search(r'(\\\
          d+)->80/tcp', port_info)\n                        if port_match:\n     \
          \                       port = port_match.group(1)\n                   \
          \         result += f\"**访问地址**: http://localhost:{port}\\n\\n\"\n     \
          \                   elif \"8080->80/tcp\" in port_info:\n              \
          \              result += f\"**访问地址**: http://localhost:8080\\n\\n\"\n  \
          \                  \n                    return {\"result\": result}\n \
          \               else:\n                    # API返回错误\n                 \
          \   error_msg = response_data.get(\"message\", \"未知错误\")\n             \
          \       return {\"result\": f\"### ❌ 容器启动失败\\n\\n错误信息: {error_msg}\"}\n\
          \            else:\n                # HTTP错误\n                return {\"\
          result\": f\"### ❌ API请求失败\\n\\nHTTP状态码: {response.status_code}\"}\n   \
          \             \n        except requests.exceptions.RequestException as e:\n\
          \            return {\"result\": f\"### ❌ API请求异常\\n\\n{str(e)}\"}\n   \
          \         \n    except Exception as e:\n        return {\"result\": f\"\
          ### �� 处理错误\\n\\n{str(e)}\"} "
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: true
        title: start
        type: code
        variables:
        - value_selector:
          - '1751957987156'
          - text
          variable: input
        - value_selector:
          - env
          - API_KEY
          variable: API_KEY
      height: 54
      id: '1751958044942'
      position:
        x: 986
        y: 288.33052904108064
      positionAbsolute:
        x: 986
        y: 288.33052904108064
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1751958044942'
          - result
          variable: result
        selected: false
        title: 结束
        type: end
      height: 90
      id: '1751958079209'
      position:
        x: 1296
        y: 282
      positionAbsolute:
        x: 1296
        y: 282
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: -137.94929446024003
      y: 163.9259484982798
      zoom: 0.7515807390327814
