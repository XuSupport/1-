app:
  description: 停止对应容器
  icon: 🤖
  icon_background: '#FFEAD5'
  mode: workflow
  name: 停止对应容器03
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/deepseek:0.0.6@dd589dc093c8084925858034ab5ec1fdf0d33819f43226c2f8c4a749a9acbbb2
kind: app
version: 0.3.0
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: b9f1ce16-95b1-49cb-b732-b189d2dd0923
    name: API_KEY
    selector:
    - env
    - API_KEY
    value: e62a9b0d239d3f6fe2f203c5bede453c
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: start
        targetType: code
      id: 1751957208728-source-1751957214274-target
      source: '1751957208728'
      sourceHandle: source
      target: '1751957214274'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: llm
      id: 1751957214274-source-1751957253130-target
      source: '1751957214274'
      sourceHandle: source
      target: '1751957253130'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1751957253130-source-1751957292502-target
      source: '1751957253130'
      sourceHandle: source
      target: '1751957292502'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: end
      id: 1751957292502-source-1751957280872-target
      source: '1751957292502'
      sourceHandle: source
      target: '1751957280872'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 开始
        type: start
        variables:
        - label: input
          max_length: 256
          options: []
          required: true
          type: text-input
          variable: input
      height: 90
      id: '1751957208728'
      position:
        x: 80
        y: 282
      positionAbsolute:
        x: 80
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport requests\n\
          import json\nimport datetime\nimport os\n\ndef main(input:str, API_KEY:str)\
          \ -> dict:\n    \"\"\"\n    用于检查当前Docker容器运行状态的函数，适用于Dify平台\n    通过HTTP请求访问docker_api_service获取容器信息\n\
          \    \n    参数:\n        input: 用户输入的查询文本\n        \n    返回:\n        dict:\
          \ 包含Docker容器状态信息的美观中文格式\n    \"\"\"\n    # API服务的URL\n    API_URL = \"http://172.17.0.1:8005/docker/ps\"\
          \n    \n    # 添加API密钥到请求头\n    headers = {\n        \"X-API-Key\": API_KEY\n\
          \    }\n\n    try:\n        # 发送GET请求获取容器列表\n        response = requests.get(API_URL,\
          \ headers=headers, timeout=10)\n        response.raise_for_status()  # 如果响应状态码不是200，会抛出异常\n\
          \        \n        # 解析JSON响应\n        data = response.json()\n        \n\
          \        # 检查API响应状态\n        if data.get(\"status\") != \"success\":\n\
          \            error_msg = data.get('message', '未知错误')\n            result\
          \ = f\"\U0001F534 **错误**: API返回非成功状态\\n\\n原因: {error_msg}\\n\\n用户查询: {input}\"\
          \n            return {\"result\": result}\n            \n        # 获取容器列表\n\
          \        containers = data.get(\"containers\", [])\n        \n        #\
          \ 格式化容器信息以便易于阅读\n        formatted_containers = []\n        for container\
          \ in containers:\n            formatted_container = {\n                \"\
          container_id\": container.get(\"ID\", \"\")[:12],  # 只保留ID前12位\n       \
          \         \"name\": container.get(\"Names\", \"\"),\n                \"\
          image\": container.get(\"Image\", \"\"),\n                \"status\": container.get(\"\
          Status\", \"\"),\n                \"ports\": container.get(\"Ports\", \"\
          \")\n            }\n            formatted_containers.append(formatted_container)\n\
          \        \n        # 获取当前时间\n        current_time = datetime.datetime.now().strftime(\"\
          %Y-%m-%d %H:%M:%S\")\n        \n        # 构建美观的中文输出\n        if not formatted_containers:\n\
          \            # 没有运行的容器\n            result = f\"### \U0001F50D Docker容器状态查询结果\\\
          n\\n\"\n            result += f\"**查询时间**: {current_time}\\n\\n\"\n    \
          \        result += f\"**运行状态**: 当前没有正在运行的Docker容器\\n\\n\"\n            result\
          \ += f\"**用户查询**: {input}\"\n        else:\n            # 有运行的容器\n     \
          \       result = f\"### \U0001F433 Docker容器状态查询结果\\n\\n\"\n            result\
          \ += f\"**查询时间**: {current_time}\\n\"\n            result += f\"**运行容器总数**:\
          \ {len(formatted_containers)}个\\n\\n\"\n            \n            # 表格标题\n\
          \            result += f\"| 容器ID | 容器名称 | 镜像 | 状态 | 端口映射 |\\n\"\n      \
          \      result += f\"|--------|---------|------|------|--------|\\n\"\n \
          \           \n            # 表格内容\n            for container in formatted_containers:\n\
          \                result += f\"| {container['container_id']} | {container['name']}\
          \ | {container['image']} | {container['status']} | {container['ports']}\
          \ |\\n\"\n            \n            result += f\"\\n**用户查询**: {input}\"\n\
          \        \n        # 返回符合Dify格式的结果\n        return {\"result\": result}\n\
          \    \n    except requests.exceptions.ConnectionError:\n        # API服务连接错误\n\
          \        result = f\"### ❌ 连接错误\\n\\n\"\n        result += f\"无法连接到Docker\
          \ API服务 {API_URL}\\n\\n\"\n        result += f\"**可能原因**: Docker API服务未启动或网络问题\\\
          n\\n\"\n        result += f\"**解决方案**: 请确保Docker API服务正在运行，并检查网络连接\\n\\\
          n\"\n        result += f\"**用户查询**: {input}\"\n        return {\"result\"\
          : result}\n    \n    except requests.exceptions.Timeout:\n        # 请求超时\n\
          \        result = f\"### ⏱️ 请求超时\\n\\n\"\n        result += f\"连接Docker\
          \ API服务超时\\n\\n\"\n        result += f\"**可能原因**: 服务器响应时间过长或负载过高\\n\\n\"\
          \n        result += f\"**解决方案**: 请检查服务器状态，稍后再试\\n\\n\"\n        result +=\
          \ f\"**用户查询**: {input}\"\n        return {\"result\": result}\n    \n  \
          \  except requests.exceptions.RequestException as e:\n        # 其他请求错误\n\
          \        result = f\"### ⚠️ 请求错误\\n\\n\"\n        result += f\"发送请求时出错:\
          \ {str(e)}\\n\\n\"\n        result += f\"**用户查询**: {input}\"\n        return\
          \ {\"result\": result}\n    \n    except json.JSONDecodeError:\n       \
          \ # JSON解析错误\n        result = f\"### \U0001F4C4 数据格式错误\\n\\n\"\n      \
          \  result += f\"API返回的响应不是有效的JSON格式\\n\\n\"\n        result += f\"**可能原因**:\
          \ API服务返回了非标准格式的数据\\n\\n\"\n        result += f\"**解决方案**: 请检查API服务的配置和状态\\\
          n\\n\"\n        result += f\"**用户查询**: {input}\"\n        return {\"result\"\
          : result}\n    \n    except Exception as e:\n        # 其他未知异常\n        result\
          \ = f\"### \U0001F525 未知错误\\n\\n\"\n        result += f\"发生未知错误: {str(e)}\\\
          n\\n\"\n        result += f\"**用户查询**: {input}\"\n        return {\"result\"\
          : result} "
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 查看当前容器状态
        type: code
        variables:
        - value_selector:
          - '1751957208728'
          - input
          variable: input
        - value_selector:
          - env
          - API_KEY
          variable: API_KEY
      height: 54
      id: '1751957214274'
      position:
        x: 385.3094550000294
        y: 282
      positionAbsolute:
        x: 385.3094550000294
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1751957214274'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: 7c652337-d004-449a-84e6-c97f4e79dbed
          role: system
          text: '你是一个Docker容器匹配专家。你的任务是从运行中的容器列表中找到用户想要操作的容器。


            【容器列表数据】+【用户指令】={{#context#}}

            请分析用户指令，找出他们想要操作的特定容器。用户可能会通过容器名称、ID的一部分、或者镜像名称来描述容器。

            你需要进行模糊匹配，不区分大小写，找出最符合用户描述的容器。


            如果找到匹配的容器，请仅输出该容器的完整名称（Names字段值）。

            如果找到多个匹配的容器，请选择匹配度最高的一个。

            如果没有找到匹配的容器，请输出null。


            注意：

            1. 不要输出任何解释或附加信息，只输出容器名称或null

            2. 对于多个匹配项，优先选择名称匹配的，其次是镜像名称匹配的，最后是ID匹配的

            3. 确保输出的是完整、准确的容器名称，可直接用于停止容器操作'
        selected: false
        title: 容器匹配
        type: llm
        variables: []
        vision:
          enabled: false
      height: 90
      id: '1751957253130'
      position:
        x: 687
        y: 282
      positionAbsolute:
        x: 687
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1751957292502'
          - result
          variable: text
        selected: false
        title: 结束
        type: end
      height: 90
      id: '1751957280872'
      position:
        x: 1291
        y: 282
      positionAbsolute:
        x: 1291
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport requests\n\
          import json\n\ndef main(input: str, API_KEY: str) -> dict:\n    \"\"\"\n\
          \    根据用户输入停止特定的Docker容器，适用于Dify平台。\n    已修复认证问题，确保API密钥随请求发送。\n    \n \
          \   参数:\n        input: 用户输入，格式应为JSON字符串，包含要停止的容器ID或名称\n              例如:\
          \ {\"container_id\": \"abc123\"} 或 {\"container_name\": \"mysql_container\"\
          }\n        API_KEY: 用于认证的API密钥，由Dify平台自动传入\n    \n    返回:\n        dict:\
          \ 包含操作结果的JSON字典，格式为 {\"result\": \"...\"}\n    \"\"\"\n    # API服务的URL\n\
          \    API_BASE_URL = \"http://172.17.0.1:8005\"\n    \n    try:\n       \
          \ # 添加API密钥到请求头\n        headers = {\n            \"X-API-Key\": API_KEY,\n\
          \            \"Content-Type\": \"application/json\" # 明确指定内容类型\n       \
          \ }\n        \n        # 解析用户输入，获取容器ID或名称\n        container_info = None\n\
          \        try:\n            # 尝试解析JSON输入\n            user_input = json.loads(input)\n\
          \            container_info = user_input.get(\"container_id\") or user_input.get(\"\
          container_name\")\n        except json.JSONDecodeError:\n            # 如果不是JSON格式，直接使用输入作为容器ID/名称\n\
          \            container_info = input.strip()\n        \n        if not container_info:\n\
          \            return {\n                \"result\": json.dumps({\n      \
          \              \"status\": \"error\",\n                    \"error_type\"\
          : \"invalid_input\",\n                    \"message\": \"请提供有效的容器ID或名称\"\
          ,\n                    \"user_query\": input\n                }, ensure_ascii=False)\n\
          \            }\n        \n        # 如果需要，先获取容器列表来验证容器存在\n        # 注意：这里已经正确使用了\
          \ headers\n        containers_response = requests.get(f\"{API_BASE_URL}/docker/ps\"\
          , headers=headers, timeout=10)\n        containers_response.raise_for_status()\n\
          \        containers_data = containers_response.json()\n        \n      \
          \  if containers_data.get(\"status\") != \"success\":\n            return\
          \ {\n                \"result\": json.dumps({\n                    \"status\"\
          : \"error\",\n                    \"message\": \"获取容器列表失败: \" + containers_data.get(\"\
          message\", \"未知错误\"),\n                    \"user_query\": input\n     \
          \           }, ensure_ascii=False)\n            }\n        \n        # 查找匹配的容器\n\
          \        target_container = None\n        containers = containers_data.get(\"\
          containers\", [])\n        container_id_to_stop = None\n        \n     \
          \   for container in containers:\n            container_id = container.get(\"\
          ID\", \"\")\n            container_name = container.get(\"Names\", \"\"\
          )\n            \n            # 匹配容器ID或名称（不区分大小写）\n            if (container_info.lower()\
          \ in container_id.lower() or \n                container_info.lower() in\
          \ container_name.lower()):\n                target_container = container\n\
          \                container_id_to_stop = container_id\n                break\n\
          \        \n        # 如果没找到匹配的容器\n        if not target_container:\n    \
          \        return {\n                \"result\": json.dumps({\n          \
          \          \"status\": \"error\",\n                    \"error_type\": \"\
          container_not_found\",\n                    \"message\": f\"未找到匹配 '{container_info}'\
          \ 的运行中容器\",\n                    \"user_query\": input\n               \
          \ }, ensure_ascii=False)\n            }\n        \n        # 发送请求停止容器\n\
          \        # 关键修改：在这里添加 headers=headers 参数\n        stop_response = requests.post(\n\
          \            f\"{API_BASE_URL}/docker/stop\",\n            json={\"container_id\"\
          : container_id_to_stop},\n            headers=headers, # <-- 修复点：添加认证头\n\
          \            timeout=30\n        )\n        stop_response.raise_for_status()\n\
          \        stop_data = stop_response.json()\n        \n        # 检查停止操作是否成功\n\
          \        if stop_data.get(\"status\") != \"success\":\n            return\
          \ {\n                \"result\": json.dumps({\n                    \"status\"\
          : \"error\",\n                    \"message\": f\"停止容器失败: {stop_data.get('message',\
          \ '未知错误')}\",\n                    \"container\": {\n                  \
          \      \"id\": target_container.get(\"ID\", \"\"),\n                   \
          \     \"name\": target_container.get(\"Names\", \"\")\n                \
          \    },\n                    \"user_query\": input\n                }, ensure_ascii=False)\n\
          \            }\n        \n        # 操作成功\n        return {\n           \
          \ \"result\": json.dumps({\n                \"status\": \"success\",\n \
          \               \"message\": f\"容器 '{target_container.get('Names', '')}'\
          \ ({target_container.get('ID', '')[:12]}) 已成功停止。\",\n                \"\
          container\": {\n                    \"id\": target_container.get(\"ID\"\
          , \"\"),\n                    \"name\": target_container.get(\"Names\",\
          \ \"\"),\n                    \"image\": target_container.get(\"Image\"\
          , \"\")\n                },\n                \"user_query\": input\n   \
          \         }, ensure_ascii=False)\n        }\n    \n    except requests.exceptions.ConnectionError:\n\
          \        # API服务连接错误\n        return {\n            \"result\": json.dumps({\n\
          \                \"status\": \"error\",\n                \"error_type\"\
          : \"connection_error\",\n                \"message\": f\"无法连接到Docker API服务\
          \ {API_BASE_URL}，请确保服务正在运行。\",\n                \"user_query\": input\n\
          \            }, ensure_ascii=False)\n        }\n    except requests.exceptions.Timeout:\n\
          \        # 请求超时\n        return {\n            \"result\": json.dumps({\n\
          \                \"status\": \"error\",\n                \"error_type\"\
          : \"timeout\",\n                \"message\": f\"连接Docker API服务 {API_BASE_URL}\
          \ 超时，请检查服务是否正常运行。\",\n                \"user_query\": input\n          \
          \  }, ensure_ascii=False)\n        }\n    except requests.exceptions.HTTPError\
          \ as e:\n        # 其他请求错误，特别是401 Unauthorized\n        error_message = str(e)\n\
          \        if e.response is not None:\n            try:\n                #\
          \ 尝试解析JSON错误响应\n                error_details = e.response.json()\n    \
          \            if \"message\" in error_details:\n                    error_message\
          \ = error_details[\"message\"]\n            except json.JSONDecodeError:\n\
          \                # 如果不是JSON，则使用原始文本\n                error_message = e.response.text\n\
          \n        return {\n            \"result\": json.dumps({\n             \
          \   \"status\": \"error\",\n                \"error_type\": \"request_error\"\
          ,\n                \"http_status_code\": e.response.status_code if e.response\
          \ else None,\n                \"message\": f\"发送请求时出错: {error_message}\"\
          ,\n                \"user_query\": input\n            }, ensure_ascii=False)\n\
          \        }\n    except Exception as e:\n        # 其他未知异常\n        return\
          \ {\n            \"result\": json.dumps({\n                \"status\": \"\
          error\",\n                \"error_type\": \"unknown_error\",\n         \
          \       \"message\": str(e),\n                \"user_query\": input\n  \
          \          }, ensure_ascii=False)\n        }\n\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: true
        title: 停止对应容器
        type: code
        variables:
        - value_selector:
          - '1751957253130'
          - text
          variable: input
        - value_selector:
          - env
          - API_KEY
          variable: API_KEY
      height: 54
      id: '1751957292502'
      position:
        x: 993.3094550000292
        y: 282
      positionAbsolute:
        x: 993.3094550000292
        y: 282
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: -408.66532362135797
      y: 165.81630514919743
      zoom: 0.8660051830299772
